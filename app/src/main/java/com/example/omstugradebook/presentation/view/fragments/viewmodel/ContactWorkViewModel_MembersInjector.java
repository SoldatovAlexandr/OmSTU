// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.omstugradebook.presentation.view.fragments.viewmodel;

import com.example.omstugradebook.data.dao.ContactWorkDao;
import com.example.omstugradebook.data.dao.UserDao;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class ContactWorkViewModel_MembersInjector
    implements MembersInjector<ContactWorkViewModel> {
  private final Provider<ContactWorkDao> contactWorkDaoProvider;

  private final Provider<UserDao> userDaoProvider;

  public ContactWorkViewModel_MembersInjector(
      Provider<ContactWorkDao> contactWorkDaoProvider, Provider<UserDao> userDaoProvider) {
    assert contactWorkDaoProvider != null;
    this.contactWorkDaoProvider = contactWorkDaoProvider;
    assert userDaoProvider != null;
    this.userDaoProvider = userDaoProvider;
  }

  public static MembersInjector<ContactWorkViewModel> create(
      Provider<ContactWorkDao> contactWorkDaoProvider, Provider<UserDao> userDaoProvider) {
    return new ContactWorkViewModel_MembersInjector(contactWorkDaoProvider, userDaoProvider);
  }

  @Override
  public void injectMembers(ContactWorkViewModel instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.contactWorkDao = contactWorkDaoProvider.get();
    instance.userDao = userDaoProvider.get();
  }

  public static void injectContactWorkDao(
      ContactWorkViewModel instance, Provider<ContactWorkDao> contactWorkDaoProvider) {
    instance.contactWorkDao = contactWorkDaoProvider.get();
  }

  public static void injectUserDao(
      ContactWorkViewModel instance, Provider<UserDao> userDaoProvider) {
    instance.userDao = userDaoProvider.get();
  }
}
